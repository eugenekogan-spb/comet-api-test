"""
–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–ø—É—Å–∫–∞ –∑–∞–¥–∞—á –Ω–∞ –º–æ–¥–µ–ª—è—Ö
"""
import streamlit as st
import sys
import os
import json
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.dirname(__file__)))))

from llm_runner.db.models import init_database
from llm_runner.db.repo import DatabaseManager
from llm_runner.core.providers.comet import CometProvider


def main():
    st.header("üöÄ –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î
    init_database()
    db_manager = DatabaseManager()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Comet API
    if not os.getenv("COMET_API_KEY"):
        st.error("‚ö†Ô∏è COMET_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
        st.info("–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ Settings –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –∫–ª—é—á–∞")
        return
    
    # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏
    tab1, tab2 = st.tabs(["üéØ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∑–∞–¥–∞—á—É", "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã"])
    
    with tab1:
        show_run_form(db_manager)
    
    with tab2:
        show_results(db_manager)


def show_run_form(db_manager: DatabaseManager):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–æ—Ä–º—É –∑–∞–ø—É—Å–∫–∞ –∑–∞–¥–∞—á–∏"""
    st.subheader("–ó–∞–ø—É—Å—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –Ω–∞ –º–æ–¥–µ–ª–∏")
    
    with db_manager.get_session() as session:
        task_repo = db_manager.get_task_repo(session)
        tasks = task_repo.get_all_tasks()
    
    if not tasks:
        st.warning("üìù –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∑–∞–¥–∞—á–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ Dataset")
        return
    
    with st.form("run_task_form"):
        # –í—ã–±–æ—Ä –∑–∞–¥–∞—á–∏
        task_options = {f"{task.name} (ID: {task.id[:8]}...)": task for task in tasks}
        selected_task_name = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É:", list(task_options.keys()))
        selected_task = task_options[selected_task_name]
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–¥–∞—á–∏
        with st.expander("üìã –î–µ—Ç–∞–ª–∏ –∑–∞–¥–∞—á–∏", expanded=False):
            st.markdown(f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** {selected_task.name}")
            st.markdown(f"**ID:** `{selected_task.id}`")
            st.markdown("**–®–∞–±–ª–æ–Ω –ø—Ä–æ–º–ø—Ç–∞:**")
            st.code(selected_task.prompt_template, language="text")
            if selected_task.input_text:
                st.markdown("**–í—Ö–æ–¥–Ω–æ–π —Ç–µ–∫—Å—Ç:**")
                st.text(selected_task.input_text)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏
        st.markdown("### ü§ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏")
        
        col1, col2 = st.columns(2)
        with col1:
            model = st.text_input("–ú–æ–¥–µ–ª—å", value="comet-7b", help="–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ Comet")
        with col2:
            temperature = st.slider("Temperature", 0.0, 2.0, 0.7, 0.1)
        
        col3, col4 = st.columns(2)
        with col3:
            max_tokens = st.number_input("Max tokens", 1, 4000, 1000)
        with col4:
            top_p = st.slider("Top P", 0.0, 1.0, 0.9, 0.1)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        with st.expander("‚öôÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"):
            stop = st.text_input("Stop sequences", placeholder="–†–∞–∑–¥–µ–ª–∏—Ç–µ –∑–∞–ø—è—Ç—ã–º–∏")
            seed = st.number_input("Seed (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)", value=None, min_value=1)
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞
        st.markdown("### üìù –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞")
        
        # –ü—Ä–æ—Å—Ç–∞—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        final_prompt = selected_task.prompt_template
        if selected_task.input_text:
            final_prompt += "\n\n" + selected_task.input_text
        
        st.markdown("**–§–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç:**")
        st.code(final_prompt, language="text")
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞
        submitted = st.form_submit_button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å", type="primary")
        
        if submitted:
            run_task(
                db_manager, 
                selected_task, 
                model, 
                final_prompt,
                temperature=temperature,
                max_tokens=max_tokens,
                top_p=top_p,
                stop=stop.split(',') if stop else None,
                seed=seed
            )


def run_task(db_manager: DatabaseManager, task, model: str, prompt: str, **params):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∑–∞–¥–∞—á—É –Ω–∞ –º–æ–¥–µ–ª–∏"""
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    progress_bar = st.progress(0)
    status_text = st.empty()
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä
        status_text.text("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Comet API...")
        progress_bar.progress(20)
        
        provider = CometProvider()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥–µ–ª—å
        status_text.text("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏...")
        progress_bar.progress(40)
        
        if not provider.validate_model(model):
            st.error(f"‚ùå –ú–æ–¥–µ–ª—å '{model}' –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        messages = [{"role": "user", "content": prompt}]
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
        status_text.text("üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –º–æ–¥–µ–ª–∏...")
        progress_bar.progress(60)
        
        result = provider.generate(messages, model, **params)
        
        progress_bar.progress(80)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        status_text.text("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...")
        
        with db_manager.get_session() as session:
            run_repo = db_manager.get_run_repo(session)
            run = run_repo.create_run(
                task_id=task.id,
                provider="comet",
                model=model,
                params=params,
                messages=messages,
                response_text=result.text,
                response_json=result.raw,
                error=result.error,
                latency_ms=result.latency_ms,
                usage=result.usage,
                finish_reason=result.finish_reason
            )
        
        progress_bar.progress(100)
        status_text.text("‚úÖ –ì–æ—Ç–æ–≤–æ!")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if result.error:
            st.error(f"‚ùå –û—à–∏–±–∫–∞: {result.error}")
        else:
            st.success("‚úÖ –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
            col1, col2, col3, col4 = st.columns(4)
            with col1:
                st.metric("–í—Ä–µ–º—è", f"{result.latency_ms}ms")
            with col2:
                st.metric("–¢–æ–∫–µ–Ω—ã", result.usage.get('total_tokens', 0))
            with col3:
                st.metric("–ü—Ä–æ–º–ø—Ç —Ç–æ–∫–µ–Ω—ã", result.usage.get('prompt_tokens', 0))
            with col4:
                st.metric("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ", result.finish_reason or "N/A")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
            st.markdown("### üìÑ –û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏:")
            st.markdown(result.text)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—ã—Ä–æ–π JSON
            with st.expander("üîç –°—ã—Ä–æ–π JSON –æ—Ç–≤–µ—Ç"):
                st.json(result.raw)
        
        st.rerun()
        
    except Exception as e:
        st.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        progress_bar.progress(0)
        status_text.text("")


def show_results(db_manager: DatabaseManager):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–ø—É—Å–∫–æ–≤"""
    st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–ø—É—Å–∫–æ–≤")
    
    with db_manager.get_session() as session:
        run_repo = db_manager.get_run_repo(session)
        runs = run_repo.get_all_runs()
    
    if not runs:
        st.info("üìä –ó–∞–ø—É—Å–∫–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç")
        return
    
    # –§–∏–ª—å—Ç—Ä—ã
    col1, col2, col3 = st.columns(3)
    with col1:
        models = list(set(run.model for run in runs))
        selected_model = st.selectbox("–ú–æ–¥–µ–ª—å", ["–í—Å–µ"] + models)
    with col2:
        statuses = ["–í—Å–µ", "–£—Å–ø–µ—à–Ω–æ", "–° –æ—à–∏–±–∫–æ–π"]
        selected_status = st.selectbox("–°—Ç–∞—Ç—É—Å", statuses)
    with col3:
        if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å"):
            st.rerun()
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    filtered_runs = runs
    if selected_model != "–í—Å–µ":
        filtered_runs = [r for r in filtered_runs if r.model == selected_model]
    if selected_status == "–£—Å–ø–µ—à–Ω–æ":
        filtered_runs = [r for r in filtered_runs if not r.error]
    elif selected_status == "–° –æ—à–∏–±–∫–æ–π":
        filtered_runs = [r for r in filtered_runs if r.error]
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    for run in filtered_runs:
        with st.expander(f"üöÄ {run.model} - {run.started_at.strftime('%d.%m.%Y %H:%M')}", expanded=False):
            col1, col2 = st.columns([2, 1])
            
            with col1:
                st.markdown(f"**ID:** `{run.id}`")
                st.markdown(f"**–ú–æ–¥–µ–ª—å:** {run.model}")
                st.markdown(f"**–í—Ä–µ–º—è:** {run.latency_ms}ms")
                st.markdown(f"**–¢–æ–∫–µ–Ω—ã:** {run.total_tokens or 0}")
                
                if run.error:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞: {run.error}")
                else:
                    st.markdown("**–û—Ç–≤–µ—Ç:**")
                    st.text(run.response_text[:200] + "..." if len(run.response_text or "") > 200 else run.response_text)
            
            with col2:
                if not run.error:
                    if st.button("‚≠ê –û—Ü–µ–Ω–∏—Ç—å", key=f"eval_{run.id}"):
                        st.session_state[f"evaluate_run_{run.id}"] = True
                
                if st.session_state.get(f"evaluate_run_{run.id}", False):
                    with st.form(f"eval_form_{run.id}"):
                        rating = st.selectbox("–û—Ü–µ–Ω–∫–∞", [1, 2, 3, 4, 5], key=f"rating_{run.id}")
                        comment = st.text_area("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", key=f"comment_{run.id}")
                        
                        if st.form_submit_button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ü–µ–Ω–∫—É"):
                            with db_manager.get_session() as session:
                                eval_repo = db_manager.get_evaluation_repo(session)
                                eval_repo.create_evaluation(run.id, rating, comment)
                                st.success("‚úÖ –û—Ü–µ–Ω–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
                                st.session_state[f"evaluate_run_{run.id}"] = False
                                st.rerun()