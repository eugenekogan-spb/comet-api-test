"""
–°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—Ü–µ–Ω–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
"""
import streamlit as st
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.dirname(__file__)))))

from llm_runner.db.models import init_database
from llm_runner.db.repo import DatabaseManager


def main():
    st.header("‚≠ê –û—Ü–µ–Ω–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î
    init_database()
    db_manager = DatabaseManager()
    
    show_evaluation_interface(db_manager)


def show_evaluation_interface(db_manager: DatabaseManager):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    
    with db_manager.get_session() as session:
        run_repo = db_manager.get_run_repo(session)
        eval_repo = db_manager.get_evaluation_repo(session)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø—É—Å–∫–∏ –±–µ–∑ –æ—à–∏–±–æ–∫
        all_runs = run_repo.get_all_runs()
        successful_runs = [r for r in all_runs if not r.error]
        
        # –ü–æ–ª—É—á–∞–µ–º —É–∂–µ –æ—Ü–µ–Ω–µ–Ω–Ω—ã–µ –∑–∞–ø—É—Å–∫–∏
        evaluated_run_ids = set()
        for run in successful_runs:
            eval_obj = eval_repo.get_evaluation_by_run_id(run.id)
            if eval_obj:
                evaluated_run_ids.add(run.id)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–µ–æ—Ü–µ–Ω–µ–Ω–Ω—ã–µ
        unevaluated_runs = [r for r in successful_runs if r.id not in evaluated_run_ids]
    
    if not successful_runs:
        st.info("üìä –ù–µ—Ç —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—É—Å–∫–æ–≤ –¥–ª—è –æ—Ü–µ–Ω–∫–∏")
        return
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("–í—Å–µ–≥–æ –∑–∞–ø—É—Å–∫–æ–≤", len(successful_runs))
    with col2:
        st.metric("–û—Ü–µ–Ω–µ–Ω–æ", len(evaluated_run_ids))
    with col3:
        st.metric("–û—Å—Ç–∞–ª–æ—Å—å", len(unevaluated_runs))
    
    # –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ä–µ–∂–∏–º–∞
    mode = st.radio(
        "–†–µ–∂–∏–º –æ—Ü–µ–Ω–∫–∏:",
        ["üéØ –û—Ü–µ–Ω–∏—Ç—å –Ω–æ–≤—ã–µ", "üìä –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ", "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ü–µ–Ω–∫–∏"],
        horizontal=True
    )
    
    if mode == "üéØ –û—Ü–µ–Ω–∏—Ç—å –Ω–æ–≤—ã–µ":
        show_unevaluated_runs(db_manager, unevaluated_runs)
    elif mode == "üìä –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ":
        show_all_evaluations(db_manager, successful_runs)
    else:
        show_edit_evaluations(db_manager, successful_runs)


def show_unevaluated_runs(db_manager: DatabaseManager, runs):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–µ–æ—Ü–µ–Ω–µ–Ω–Ω—ã–µ –∑–∞–ø—É—Å–∫–∏"""
    if not runs:
        st.success("üéâ –í—Å–µ –∑–∞–ø—É—Å–∫–∏ –æ—Ü–µ–Ω–µ–Ω—ã!")
        return
    
    st.subheader(f"–û—Ü–µ–Ω–∏—Ç—å –Ω–æ–≤—ã–µ ({len(runs)} –∑–∞–ø—É—Å–∫–æ–≤)")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –Ω–µ–æ—Ü–µ–Ω–µ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫
    run = runs[0]
    
    with st.container():
        st.markdown("---")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø—É—Å–∫–µ
        col1, col2 = st.columns([3, 1])
        with col1:
            st.markdown(f"**–ú–æ–¥–µ–ª—å:** {run.model}")
            st.markdown(f"**–í—Ä–µ–º—è:** {run.latency_ms}ms")
            st.markdown(f"**–¢–æ–∫–µ–Ω—ã:** {run.total_tokens or 0}")
            st.markdown(f"**–î–∞—Ç–∞:** {run.started_at.strftime('%d.%m.%Y %H:%M')}")
        with col2:
            st.markdown(f"**–ü—Ä–æ–≥—Ä–µ—Å—Å:** {len(runs)} –æ—Å—Ç–∞–ª–æ—Å—å")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–º–ø—Ç
        with st.expander("üìù –ü—Ä–æ–º–ø—Ç", expanded=False):
            messages = eval(run.messages_json) if run.messages_json else []
            for msg in messages:
                st.markdown(f"**{msg['role']}:** {msg['content']}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
        st.markdown("### üìÑ –û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏:")
        st.markdown(run.response_text)
        
        # –§–æ—Ä–º–∞ –æ—Ü–µ–Ω–∫–∏
        st.markdown("---")
        with st.form(f"evaluate_{run.id}"):
            st.markdown("### ‚≠ê –û—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–∞:")
            
            col1, col2 = st.columns(2)
            with col1:
                rating = st.selectbox(
                    "–û—Ü–µ–Ω–∫–∞ (1-5):",
                    [1, 2, 3, 4, 5],
                    format_func=lambda x: f"{x} - {'–ü–ª–æ—Ö–æ' if x == 1 else '–û—Ç–ª–∏—á–Ω–æ' if x == 5 else '–°—Ä–µ–¥–Ω–µ'}",
                    key=f"rating_{run.id}"
                )
            
            with col2:
                # –ë—ã—Å—Ç—Ä—ã–µ –∫–Ω–æ–ø–∫–∏
                st.markdown("**–ë—ã—Å—Ç—Ä–∞—è –æ—Ü–µ–Ω–∫–∞:**")
                if st.form_submit_button("1Ô∏è‚É£", help="–ü–ª–æ—Ö–æ"):
                    rating = 1
                if st.form_submit_button("2Ô∏è‚É£", help="–ù–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–≥–æ"):
                    rating = 2
                if st.form_submit_button("3Ô∏è‚É£", help="–°—Ä–µ–¥–Ω–µ"):
                    rating = 3
                if st.form_submit_button("4Ô∏è‚É£", help="–•–æ—Ä–æ—à–æ"):
                    rating = 4
                if st.form_submit_button("5Ô∏è‚É£", help="–û—Ç–ª–∏—á–Ω–æ"):
                    rating = 5
            
            comment = st.text_area(
                "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):",
                placeholder="–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –∏–ª–∏ –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –≤ –æ—Ç–≤–µ—Ç–µ...",
                key=f"comment_{run.id}"
            )
            
            col1, col2, col3 = st.columns(3)
            with col1:
                submit_eval = st.form_submit_button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ü–µ–Ω–∫—É", type="primary")
            with col2:
                skip = st.form_submit_button("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
            with col3:
                if st.form_submit_button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å"):
                    st.rerun()
            
            if submit_eval:
                with db_manager.get_session() as session:
                    eval_repo = db_manager.get_evaluation_repo(session)
                    eval_repo.create_evaluation(run.id, rating, comment)
                    st.success("‚úÖ –û—Ü–µ–Ω–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
                    st.rerun()
            
            if skip:
                st.info("‚è≠Ô∏è –ó–∞–ø—É—Å–∫ –ø—Ä–æ–ø—É—â–µ–Ω")
                st.rerun()


def show_all_evaluations(db_manager: DatabaseManager, runs):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –æ—Ü–µ–Ω–∫–∏"""
    st.subheader("–í—Å–µ –æ—Ü–µ–Ω–∫–∏")
    
    with db_manager.get_session() as session:
        eval_repo = db_manager.get_evaluation_repo(session)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ü–µ–Ω–∫–∏
        evaluations = []
        for run in runs:
            eval_obj = eval_repo.get_evaluation_by_run_id(run.id)
            if eval_obj:
                evaluations.append((run, eval_obj))
    
    if not evaluations:
        st.info("üìä –û—Ü–µ–Ω–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç")
        return
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –æ—Ü–µ–Ω–∫–∏
    evaluations.sort(key=lambda x: x[1].created_at, reverse=True)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    ratings = [eval_obj.rating for _, eval_obj in evaluations]
    avg_rating = sum(ratings) / len(ratings) if ratings else 0
    
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        st.metric("–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞", f"{avg_rating:.1f}")
    with col2:
        st.metric("–í—Å–µ–≥–æ –æ—Ü–µ–Ω–æ–∫", len(evaluations))
    with col3:
        st.metric("–û—Ü–µ–Ω–∫–∞ 5", ratings.count(5))
    with col4:
        st.metric("–û—Ü–µ–Ω–∫–∞ 1", ratings.count(1))
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ü–µ–Ω–∫–∏
    for run, eval_obj in evaluations:
        with st.expander(f"‚≠ê {eval_obj.rating}/5 - {run.model} - {eval_obj.created_at.strftime('%d.%m.%Y %H:%M')}", expanded=False):
            col1, col2 = st.columns([2, 1])
            
            with col1:
                st.markdown(f"**–ú–æ–¥–µ–ª—å:** {run.model}")
                st.markdown(f"**–í—Ä–µ–º—è:** {run.latency_ms}ms")
                st.markdown(f"**–¢–æ–∫–µ–Ω—ã:** {run.total_tokens or 0}")
                
                if eval_obj.comment:
                    st.markdown("**–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:**")
                    st.text(eval_obj.comment)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
                st.markdown("**–û—Ç–≤–µ—Ç:**")
                st.text(run.response_text[:300] + "..." if len(run.response_text or "") > 300 else run.response_text)
            
            with col2:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–≤–µ–∑–¥–æ—á–∫–∏
                stars = "‚≠ê" * eval_obj.rating + "‚òÜ" * (5 - eval_obj.rating)
                st.markdown(f"**–û—Ü–µ–Ω–∫–∞:** {stars}")
                st.markdown(f"**–î–∞—Ç–∞ –æ—Ü–µ–Ω–∫–∏:** {eval_obj.created_at.strftime('%d.%m.%Y %H:%M')}")


def show_edit_evaluations(db_manager: DatabaseManager, runs):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ü–µ–Ω–æ–∫"""
    st.subheader("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ü–µ–Ω–∫–∏")
    
    with db_manager.get_session() as session:
        eval_repo = db_manager.get_evaluation_repo(session)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ü–µ–Ω–∫–∏
        evaluations = []
        for run in runs:
            eval_obj = eval_repo.get_evaluation_by_run_id(run.id)
            if eval_obj:
                evaluations.append((run, eval_obj))
    
    if not evaluations:
        st.info("üìä –û—Ü–µ–Ω–æ–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ—Ç")
        return
    
    # –í—ã–±–æ—Ä –æ—Ü–µ–Ω–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    eval_options = {f"{run.model} - {eval_obj.rating}/5 - {eval_obj.created_at.strftime('%d.%m.%Y')}": (run, eval_obj) for run, eval_obj in evaluations}
    selected_eval_name = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ü–µ–Ω–∫—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", list(eval_options.keys()))
    selected_run, selected_eval = eval_options[selected_eval_name]
    
    # –§–æ—Ä–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    with st.form("edit_evaluation"):
        st.markdown("### ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ü–µ–Ω–∫—É")
        
        new_rating = st.selectbox(
            "–ù–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞:",
            [1, 2, 3, 4, 5],
            index=selected_eval.rating - 1
        )
        
        new_comment = st.text_area(
            "–ù–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:",
            value=selected_eval.comment or ""
        )
        
        if st.form_submit_button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è", type="primary"):
            with db_manager.get_session() as session:
                eval_repo = db_manager.get_evaluation_repo(session)
                eval_repo.update_evaluation(selected_run.id, new_rating, new_comment)
                st.success("‚úÖ –û—Ü–µ–Ω–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
                st.rerun()